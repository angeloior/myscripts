{
	"info": {
		"name": "TEST_BOOK-API",
		"_postman_id": "dd6334a2-8d1a-b93b-d2f2-eab6e432506f",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login (alone)",
			"description": "",
			"item": [
				{
					"name": "60 Optima Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47d054a6-d130-4caf-b6e2-07af199a9640",
								"type": "text/javascript",
								"exec": [
									"postman.setEnvironmentVariable(\"SESSIONID\", responseBody);",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/optima-wsi/auth/login/?uname={{USERNAME}}&password={{PASSWORD}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"optima-wsi",
								"auth",
								"login",
								""
							],
							"query": [
								{
									"key": "uname",
									"value": "{{USERNAME}}",
									"equals": true
								},
								{
									"key": "password",
									"value": "{{PASSWORD}}",
									"equals": true
								}
							]
						},
						"description": "60 Optima Login "
					},
					"response": []
				}
			]
		},
		{
			"name": "KPI",
			"description": "",
			"item": [
				{
					"name": "60",
					"description": "",
					"item": [
						{
							"name": "60 Optima Login ",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"postman.setEnvironmentVariable(\"SESSIONID\", responseBody);",
											""
										],
										"id": "47d054a6-d130-4caf-b6e2-07af199a9640",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-wsi/auth/login/?uname={{USERNAME}}&password={{PASSWORD}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-wsi",
										"auth",
										"login",
										""
									],
									"query": [
										{
											"equals": true,
											"key": "uname",
											"value": "{{USERNAME}}"
										},
										{
											"equals": true,
											"key": "password",
											"value": "{{PASSWORD}}"
										}
									]
								},
								"description": "60 Optima Login "
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "61-65",
					"description": "",
					"item": [
						{
							"name": "61  Get the list of KPIs defined in Optima in XML format from API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e683b37-6fa8-4ac1-a280-4a55b5276668",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//questo test andrebbe convertito in json ma il valore ha i due punti che sono un carattere riservato del json format",
											"//il test successivo da lo stesso valore in json direttamnente, quindi è meglio usare il test che ritorna le totalfeatuire direttamnete in json"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:kpid&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs",
										""
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:kpid",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "61  Get the list of KPIs defined in Optima in XML format from API\nThis test is aimed to retrieve the list of all the KPI defined in Optima (in XML format)"
							},
							"response": []
						},
						{
							"name": "62  Get from API the KPI list in JSON format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "770de8b8-13f0-47cc-b13c-eb4520601283",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4ae2e52b-2ba0-41dd-a63a-f43301f2ce22",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//per trb",
											"//console.log(jsonData);",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"//pm.environment.set(\"TOTALFEATURES\", jsonData.totalFeatures);",
											"",
											"//riporta le variabili come test result",
											"//tests[\"type = \" + jsonData.type] = true",
											"tests[\"totalFeatures = \" + jsonData.totalFeatures] = true",
											"",
											"//funzionale al test successivo tutti",
											"//tests[\"features = \" + jsonData.features] = true",
											"",
											"//il primo kpiid",
											"tests[\"first_kpiid = \" + jsonData.features[0].properties.idno] = true",
											"",
											"pm.environment.set(\"KPIID\", jsonData.features[0].properties.idno);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:kpid&outputFormat=application/json&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs",
										""
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:kpid",
											"equals": true
										},
										{
											"key": "outputFormat",
											"value": "application/json",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "62  Get from API the KPI list in JSON format\nThis test is aimed to retrieve the list of all KPI defined in Optima (in JSON format)."
							},
							"response": []
						},
						{
							"name": "63   Get the values of a single KPI from the full list defined in Optima from API -JSON",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2dd8344-0d00-4cf8-9131-efe5bd7d0b43",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:kpi_dataview&viewparams=kpid:{{KPIID}}&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs",
										""
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:kpi_dataview",
											"equals": true
										},
										{
											"key": "viewparams",
											"value": "kpid:{{KPIID}}",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "63   Get the values of a single KPI from the full list defined in Optima from API -JSON\n\nThis test is aimed to retrieve the values of a single KPI from the full list defined in Optima (in json format)\nrun test 62 to select KPI from the list"
							},
							"response": []
						},
						{
							"name": "64  Get the value of a single KPI of the latest simulation from the full list defined in Optima from API",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da7227ef-ebd8-4bc2-97ba-52fad45ffffb",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:kpi_dataview&viewparams= kpid:{{KPIID}};latestrun:true;base:true&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs",
										""
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:kpi_dataview",
											"equals": true
										},
										{
											"key": "viewparams",
											"value": " kpid:{{KPIID}};latestrun:true;base:true",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to retrieve the values of a single KPI from the latest simulation from the full list defined in Optima (in XML format)"
							},
							"response": []
						},
						{
							"name": "65  Get from API values of a specified KPI in JSON format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c0fe0ac-6ddf-43f5-94b2-acbd5155a37f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//per trb",
											"//console.log(jsonData);",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"//pm.environment.set(\"TOTALFEATURES\", jsonData.totalFeatures);",
											"",
											"//riporta le variabili come test result",
											"//tests[\"type = \" + jsonData.type] = true",
											"tests[\"totalFeatures = \" + jsonData.totalFeatures] = true"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs?request=getFeature&typeName=optima:kpi_dataview&outputFormat=application/json&viewparams=kpid:{{KPIID}}&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs"
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:kpi_dataview",
											"equals": true
										},
										{
											"key": "outputFormat",
											"value": "application/json",
											"equals": true
										},
										{
											"key": "viewparams",
											"value": "kpid:{{KPIID}}",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to retrieve the values of a specified KPI defined in Optima (in JSON  format)."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "66",
					"description": "",
					"item": [
						{
							"name": "72   Get the TRE status (SIMID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d5a7218-b7bc-4908-8550-c0924156645c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SIMID\", xmlTree.TRE_TATTICO.response.simg.simu.$.idno);",
											"tests[\"SIMID = \" + xmlTree.TRE_TATTICO.response.simg.simu.$.idno] = true"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-wsi/tre/TRE_tattico?action=status&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-wsi",
										"tre",
										"TRE_tattico"
									],
									"query": [
										{
											"key": "action",
											"value": "status",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "72   Get the TRE status.\nQuesto test serve per riempire la varibile di ambiente SIMID. Se al momento della richiesta dello status di TRE la simulazione non è restituita riprovare....o fare partoire una nuova simulazione."
							},
							"response": []
						},
						{
							"name": "66 Get all the values of the KPIs of the full list defined in Optima for a specific simulation ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f481cb8d-4540-413f-83dd-253ff6ca008c",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:simu_kpi_dataview&viewparams=simid:{{SIMID}}&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"geoserver",
										"wfs",
										""
									],
									"query": [
										{
											"key": "request",
											"value": "getFeature",
											"equals": true
										},
										{
											"key": "typeName",
											"value": "optima:simu_kpi_dataview",
											"equals": true
										},
										{
											"key": "viewparams",
											"value": "simid:{{SIMID}}",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to retrieve all the values of KPI defined in Optima for a specific simulation (in XML format)\n\npreventive query on database:\n\nSIMID=select idno from simu where inst is not null limit 1"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Optima Scenarios and TRE",
			"description": "",
			"item": [
				{
					"name": "67-69 Scenario",
					"description": "",
					"item": [
						{
							"name": "67 Create Scenario and Event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d0cfb6fb-2922-47b8-903b-7ec0082bdc20",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d5841576-f297-4dba-9e3a-c604bf3912bd",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SCENARIOID\", xmlTree.Orca2Model.payloadPublication.scenario.$.idno);",
											"tests[\"last SCENARIOID created = \" + xmlTree.Orca2Model.payloadPublication.scenario.$.idno] = true",
											"",
											"//per prendere le date ...c'e' il problema dei due punti nel nome!!!",
											"//tests[\"ns2_publicationTime = \" + xmlTree.Orca2Model.payloadPublication.scenario.$.d2Envelope.ns2:payloadPublication.ns2:PublicationCreator.ns2:PublicationTime] = true"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<orca2:Orca2Model xmlns:D2LogicalModel=\"http://datex2.eu/schema/2/2_0\" xmlns:orca2=\"http://sistemaits.com/orca2/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://sistemaits.com/orca2/1 ../../../../../../ztest/ORCA2.xsd \">\r\n\r\n\t<orca2:exchange>\r\n\t\t<orca2:provider>TEST</orca2:provider>\r\n\t</orca2:exchange>\r\n\r\n\t<orca2:payloadPublication publicationTime=\"\" xsi:type=\"orca2:ScenarioManagement\">\r\n\t\r\n\t\t<orca2:scenario idno=\"\" description=\"A scenario with a Datex2 event POSTMAN\">\t\t\t\r\n\t\t\t\r\n\t\t\t<orca2:d2Envelope modelBaseVersion=\"2\">\r\n\t\t\t\t<D2LogicalModel:exchange>\r\n\t\t\t\t\t<D2LogicalModel:supplierIdentification>\r\n\t\t\t\t\t\t<D2LogicalModel:country>it</D2LogicalModel:country>\r\n\t\t\t\t\t\t<D2LogicalModel:nationalIdentifier>OPTIMA</D2LogicalModel:nationalIdentifier>\r\n\t\t\t\t\t</D2LogicalModel:supplierIdentification>\r\n\t\t\t\t</D2LogicalModel:exchange>\r\n\t\t\t\t<D2LogicalModel:payloadPublication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"D2LogicalModel:SituationPublication\" lang=\"it\">\r\n\t\t\t\t\t<D2LogicalModel:publicationTime>2018-02-02T12:37:11.000</D2LogicalModel:publicationTime>\r\n\t\t\t\t\t<D2LogicalModel:publicationCreator>\r\n\t\t\t\t\t\t<D2LogicalModel:country>it</D2LogicalModel:country>\r\n\t\t\t\t\t\t<D2LogicalModel:nationalIdentifier>OPTIMA</D2LogicalModel:nationalIdentifier>\r\n\t\t\t\t\t</D2LogicalModel:publicationCreator>\r\n\t\t\t\t\t<D2LogicalModel:situation id=\"METRO_556_2\" version=\"1\">\r\n\t\t\t\t\t\t<D2LogicalModel:headerInformation>\r\n\t\t\t\t\t\t\t<D2LogicalModel:confidentiality>noRestriction</D2LogicalModel:confidentiality>\r\n\t\t\t\t\t\t\t<D2LogicalModel:informationStatus>real</D2LogicalModel:informationStatus>\r\n\t\t\t\t\t\t</D2LogicalModel:headerInformation>\r\n\t\t\t\t\t\t<D2LogicalModel:situationRecord xsi:type=\"D2LogicalModel:RoadOrCarriagewayOrLaneManagement\" id=\"METRO_556_2.1\" version=\"1\">\r\n\t\t\t\t\t\t\t<D2LogicalModel:situationRecordCreationTime>2018-02-02T12:37:11.000</D2LogicalModel:situationRecordCreationTime>\r\n\t\t\t\t\t\t\t<D2LogicalModel:situationRecordVersionTime>2018-02-02T12:37:11.000</D2LogicalModel:situationRecordVersionTime>\r\n\t\t\t\t\t\t\t<D2LogicalModel:probabilityOfOccurrence>certain</D2LogicalModel:probabilityOfOccurrence>\r\n\t\t\t\t\t\t\t<D2LogicalModel:source>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:sourceIdentification>SVRTOC</D2LogicalModel:sourceIdentification>\r\n\t\t\t\t\t\t\t</D2LogicalModel:source>\r\n\t\t\t\t\t\t\t<D2LogicalModel:validity>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:validityStatus>definedByValidityTimeSpec</D2LogicalModel:validityStatus>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:validityTimeSpecification>\r\n\t\t\t\t\t\t\t\t\t<D2LogicalModel:overallStartTime>2018-02-02T12:37:11.000</D2LogicalModel:overallStartTime>\r\n\t\t\t\t\t\t\t\t</D2LogicalModel:validityTimeSpecification>\r\n\t\t\t\t\t\t\t</D2LogicalModel:validity>\r\n\t\t\t\t\t\t\t<D2LogicalModel:groupOfLocations xsi:type=\"D2LogicalModel:NonOrderedLocationGroupByList\">\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:locationContainedInGroup xsi:type=\"D2LogicalModel:Linear\">\r\n\t\t\t\t\t\t\t\t\t<D2LogicalModel:linearWithinLinearElement>\r\n\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:directionRelativeOnLinearSection>aligned</D2LogicalModel:directionRelativeOnLinearSection>\r\n\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:linearElement>\r\n\t\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:roadNumber>{{STRT}}</D2LogicalModel:roadNumber>\r\n\t\t\t\t\t\t\t\t\t\t</D2LogicalModel:linearElement>\r\n\t\t\t\t\t\t\t\t\t</D2LogicalModel:linearWithinLinearElement>\r\n\t\t\t\t\t\t\t\t</D2LogicalModel:locationContainedInGroup>\t\t\t\t\t\r\n\t\t\t\t\t\t\t</D2LogicalModel:groupOfLocations>\r\n\t\t\t\t\t\t\t<D2LogicalModel:roadOrCarriagewayOrLaneManagementType>roadClosed</D2LogicalModel:roadOrCarriagewayOrLaneManagementType>\r\n\t\t\t\t\t\t</D2LogicalModel:situationRecord>\r\n\t\t\t\t\t</D2LogicalModel:situation>\r\n\t\t\t\t</D2LogicalModel:payloadPublication>\r\n\t\t\t</orca2:d2Envelope>\r\n\r\n\t\t</orca2:scenario>\r\n\t \r\n\t</orca2:payloadPublication>\r\n</orca2:Orca2Model>"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/scenario?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"scenario"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct functioning of the Scenario interface by the insert of a new scenario, defined by a set of events.\nMetti gli orari giusti nel body!!!"
							},
							"response": []
						},
						{
							"name": "68  Get Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8568d823-d0d4-45a1-9040-7fffa601f118",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SCENARIOID\", xmlTree.Orca2Model.payloadPublication.scenario.$.idno);",
											"tests[\"first SCENARIOID to be deleted = \" + xmlTree.Orca2Model.payloadPublication.scenario.$.idno] = true"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/scenario?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"scenario"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "68  Get Scenario List"
							},
							"response": []
						},
						{
							"name": "68  Get Scenario - many",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SCENARIOID\", xmlTree.Orca2Model.payloadPublication.scenario[0].$.idno);",
											"tests[\"first SCENARIOID to be deleted = \" + xmlTree.Orca2Model.payloadPublication.scenario[0].$.idno] = true"
										],
										"id": "5fce4c57-2a23-45f2-a64b-17da9bf45a79",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/scenario?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"scenario"
									],
									"query": [
										{
											"equals": true,
											"key": "session",
											"value": "{{SESSIONID}}"
										}
									]
								},
								"description": "68  Get Scenario List"
							},
							"response": []
						},
						{
							"name": "69 Delete Scenario",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "603094c7-7e4e-43d3-8c00-a7e3d47828e2",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"//var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"//pm.environment.set(\"SCENARIOID\", xmlTree.Orca2Model.payloadPublication.scenario[0].$.idno);",
											"//tests[\"first SCENARIOID to be deleted = \" + xmlTree.Orca2Model.payloadPublication.scenario[0].$.idno] = true"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/scenario/{{SCENARIOID}}?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"scenario",
										"{{SCENARIOID}}"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "69 Delete a scenario"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "70-71 Simulation Group",
					"description": "",
					"item": [
						{
							"name": "67 Create Scenario",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "d0cfb6fb-2922-47b8-903b-7ec0082bdc20",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SCENARIOID\", xmlTree.Orca2Model.payloadPublication.scenario.$.idno);",
											"tests[\"last SCENARIOID created = \" + xmlTree.Orca2Model.payloadPublication.scenario.$.idno] = true",
											"",
											"//per prendere il publication time ...c'e' il problema dei due punti nel nome!!!",
											"//tests[\"ns2_publicationTime = \" + xmlTree.Orca2Model.payloadPublication.scenario.$.d2Envelope.ns2:payloadPublication.ns2:PublicationCreator.ns2:PublicationTime] = true"
										],
										"id": "216a6a3b-7789-4506-a4d6-d1ccf5bf4dd3",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<orca2:Orca2Model xmlns:D2LogicalModel=\"http://datex2.eu/schema/2/2_0\" xmlns:orca2=\"http://sistemaits.com/orca2/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://sistemaits.com/orca2/1 ../../../../../../ztest/ORCA2.xsd \">\r\n\r\n\t<orca2:exchange>\r\n\t\t<orca2:provider>TEST</orca2:provider>\r\n\t</orca2:exchange>\r\n\r\n\t<orca2:payloadPublication publicationTime=\"\" xsi:type=\"orca2:ScenarioManagement\">\r\n\t\r\n\t\t<orca2:scenario idno=\"\" description=\"A scenario with a Datex2 event POSTMAN\">\t\t\t\r\n\t\t\t\r\n\t\t\t<orca2:d2Envelope modelBaseVersion=\"2\">\r\n\t\t\t\t<D2LogicalModel:exchange>\r\n\t\t\t\t\t<D2LogicalModel:supplierIdentification>\r\n\t\t\t\t\t\t<D2LogicalModel:country>it</D2LogicalModel:country>\r\n\t\t\t\t\t\t<D2LogicalModel:nationalIdentifier>OPTIMA</D2LogicalModel:nationalIdentifier>\r\n\t\t\t\t\t</D2LogicalModel:supplierIdentification>\r\n\t\t\t\t</D2LogicalModel:exchange>\r\n\t\t\t\t<D2LogicalModel:payloadPublication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"D2LogicalModel:SituationPublication\" lang=\"it\">\r\n\t\t\t\t\t<D2LogicalModel:publicationTime>2018-02-02T12:37:11.000</D2LogicalModel:publicationTime>\r\n\t\t\t\t\t<D2LogicalModel:publicationCreator>\r\n\t\t\t\t\t\t<D2LogicalModel:country>it</D2LogicalModel:country>\r\n\t\t\t\t\t\t<D2LogicalModel:nationalIdentifier>OPTIMA</D2LogicalModel:nationalIdentifier>\r\n\t\t\t\t\t</D2LogicalModel:publicationCreator>\r\n\t\t\t\t\t<D2LogicalModel:situation id=\"METRO_556_2\" version=\"1\">\r\n\t\t\t\t\t\t<D2LogicalModel:headerInformation>\r\n\t\t\t\t\t\t\t<D2LogicalModel:confidentiality>noRestriction</D2LogicalModel:confidentiality>\r\n\t\t\t\t\t\t\t<D2LogicalModel:informationStatus>real</D2LogicalModel:informationStatus>\r\n\t\t\t\t\t\t</D2LogicalModel:headerInformation>\r\n\t\t\t\t\t\t<D2LogicalModel:situationRecord xsi:type=\"D2LogicalModel:RoadOrCarriagewayOrLaneManagement\" id=\"METRO_556_2.1\" version=\"1\">\r\n\t\t\t\t\t\t\t<D2LogicalModel:situationRecordCreationTime>2018-02-02T12:37:11.000</D2LogicalModel:situationRecordCreationTime>\r\n\t\t\t\t\t\t\t<D2LogicalModel:situationRecordVersionTime>2018-02-02T12:37:11.000</D2LogicalModel:situationRecordVersionTime>\r\n\t\t\t\t\t\t\t<D2LogicalModel:probabilityOfOccurrence>certain</D2LogicalModel:probabilityOfOccurrence>\r\n\t\t\t\t\t\t\t<D2LogicalModel:source>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:sourceIdentification>SVRTOC</D2LogicalModel:sourceIdentification>\r\n\t\t\t\t\t\t\t</D2LogicalModel:source>\r\n\t\t\t\t\t\t\t<D2LogicalModel:validity>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:validityStatus>definedByValidityTimeSpec</D2LogicalModel:validityStatus>\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:validityTimeSpecification>\r\n\t\t\t\t\t\t\t\t\t<D2LogicalModel:overallStartTime>2018-02-02T12:37:11.000</D2LogicalModel:overallStartTime>\r\n\t\t\t\t\t\t\t\t</D2LogicalModel:validityTimeSpecification>\r\n\t\t\t\t\t\t\t</D2LogicalModel:validity>\r\n\t\t\t\t\t\t\t<D2LogicalModel:groupOfLocations xsi:type=\"D2LogicalModel:NonOrderedLocationGroupByList\">\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<D2LogicalModel:locationContainedInGroup xsi:type=\"D2LogicalModel:Linear\">\r\n\t\t\t\t\t\t\t\t\t<D2LogicalModel:linearWithinLinearElement>\r\n\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:directionRelativeOnLinearSection>aligned</D2LogicalModel:directionRelativeOnLinearSection>\r\n\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:linearElement>\r\n\t\t\t\t\t\t\t\t\t\t\t<D2LogicalModel:roadNumber>{{STRT}}</D2LogicalModel:roadNumber>\r\n\t\t\t\t\t\t\t\t\t\t</D2LogicalModel:linearElement>\r\n\t\t\t\t\t\t\t\t\t</D2LogicalModel:linearWithinLinearElement>\r\n\t\t\t\t\t\t\t\t</D2LogicalModel:locationContainedInGroup>\t\t\t\t\t\r\n\t\t\t\t\t\t\t</D2LogicalModel:groupOfLocations>\r\n\t\t\t\t\t\t\t<D2LogicalModel:roadOrCarriagewayOrLaneManagementType>roadClosed</D2LogicalModel:roadOrCarriagewayOrLaneManagementType>\r\n\t\t\t\t\t\t</D2LogicalModel:situationRecord>\r\n\t\t\t\t\t</D2LogicalModel:situation>\r\n\t\t\t\t</D2LogicalModel:payloadPublication>\r\n\t\t\t</orca2:d2Envelope>\r\n\r\n\t\t</orca2:scenario>\r\n\t \r\n\t</orca2:payloadPublication>\r\n</orca2:Orca2Model>"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/scenario?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"scenario"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct functioning of the Scenario interface by the insert of a new scenario, defined by a set of events.\nMetti gli orari giusti nel body!!!"
							},
							"response": []
						},
						{
							"name": "70  Create Simulation Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SIMULATIONGROUPID\", xmlTree.Orca2Model.payloadPublication.simulationGroup.$.idno);",
											"tests[\"last SIMULATIONGROUPID created = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.$.idno] = true",
											"tests[\"simulation relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[0].$.idno] = true",
											"tests[\"simulation relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[1].$.idno] = true",
											"tests[\"scenario relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[1].scenario.$.idno] = true"
										],
										"id": "f88f4c2e-94b7-454f-850b-55c5cc61125e",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Orca2Model xmlns=\"http://sistemaits.com/orca2/1\" xmlns:ns2=\"http://datex2.eu/schema/2/2_0\" xmlns:ns3=\"http://datex2.eu/schema/2/2_0/com/sistemaits/ext\">\n  <exchange>\n    <provider>PTV-OPTIMA</provider>\n  </exchange>\n  <payloadPublication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"SimulationPayload\" publicationTime=\"\">\n    <MetaInfo>\n      <timezone>{{TIMEZONE}}</timezone>\n    </MetaInfo>\n    <simulationGroup status=\"0\" description=\"Testing a road closure\">\n      <simulation description=\"Case0 no scenario\" base=\"false\" />\n      <simulation description=\"Case1 road closed\" base=\"false\">\n\t<scenario idno=\"{{SCENARIOID}}\" />\n      </simulation>\n    </simulationGroup>\n  </payloadPublication>\n</Orca2Model>\n"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/simulation/group?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"simulation",
										"group"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to create a simulation-Group, in which a set of simulations are included, by using ORCAv2 APIs."
							},
							"response": []
						},
						{
							"name": "71 Delete  Simulation Group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5dddf51-370a-4c4e-b115-820a6749af1a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"//pm.environment.set(\"SIMULATIONGROUPID\", xmlTree.Orca2Model.payloadPublication.simulationGroup.$.idno);",
											"//tests[\"SIMULATIONGROUPID = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.$.idno] = true",
											"//tests[\"simulation relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[0].$.idno] = true",
											"//tests[\"simulation relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[1].$.idno] = true",
											"//tests[\"scenario relative = \" + xmlTree.Orca2Model.payloadPublication.simulationGroup.simulation[1].scenario.$.idno] = true"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/datex-interface/simulation/group/{{SIMULATIONGROUPID}}?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"datex-interface",
										"simulation",
										"group",
										"{{SIMULATIONGROUPID}}"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "71 Delete a simulation group"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "TRE",
					"description": "",
					"item": [
						{
							"name": "72   Get the TRE status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var xmlTree = xml2Json(responseBody);",
											"",
											"//per trb",
											"//console.log(xmlTree);",
											"",
											"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
											"pm.environment.set(\"SIMID\", xmlTree.TRE_TATTICO.response.simg.simu.$.idno);",
											"tests[\"SIMID = \" + xmlTree.TRE_TATTICO.response.simg.simu.$.idno] = true"
										],
										"id": "b9258e4d-f437-45a2-a4ed-1ce34e2864ae",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-wsi/tre/TRE_tattico?action=status&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-wsi",
										"tre",
										"TRE_tattico"
									],
									"query": [
										{
											"equals": true,
											"key": "action",
											"value": "status"
										},
										{
											"equals": true,
											"key": "session",
											"value": "{{SESSIONID}}"
										}
									]
								},
								"description": "72   Get the TRE status"
							},
							"response": []
						},
						{
							"name": "73 Start a new TRE simulation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"id": "df436829-fa10-4072-ad03-3b5ac3ea8e4a",
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-wsi/tre/TRE_tattico?action=startSim&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-wsi",
										"tre",
										"TRE_tattico"
									],
									"query": [
										{
											"equals": true,
											"key": "action",
											"value": "startSim"
										},
										{
											"equals": true,
											"key": "session",
											"value": "{{SESSIONID}}"
										}
									]
								},
								"description": "73 Start a new TRE simulation"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "74  Get all the values of one specified KPI for a specific scenario ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30530f60-79bc-4804-bc97-0d9cb40485c1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/geoserver/wfs/?request=getFeature&typeName=optima:scen_kpi_dataview&viewparams=kpid:{{KPIID}};scenid:{{SCENARIOID}}&session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"geoserver",
								"wfs",
								""
							],
							"query": [
								{
									"key": "request",
									"value": "getFeature",
									"equals": true
								},
								{
									"key": "typeName",
									"value": "optima:scen_kpi_dataview",
									"equals": true
								},
								{
									"key": "viewparams",
									"value": "kpid:{{KPIID}};scenid:{{SCENARIOID}}",
									"equals": true
								},
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "74  Get all the values of one specified KPI for a specific scenario ID.\nThis test is aimed to retrieve all the values of one specified KPI for a specific scenario (in XML format) \n\npreliminarmente sono necessari KPIID e SCENARIOOID. entrambe le variabili a questo punto dobrevvero essere già valorizzate dakll'esecuzione dei procedenti test 62 e 67."
					},
					"response": []
				}
			]
		},
		{
			"name": "Traffic-States",
			"description": "",
			"item": [
				{
					"name": "75   Get Trafficstates related to the Network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27bc4608-503d-48b3-a6aa-c4787e9ce201",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var xmlTree = xml2Json(responseBody);",
									"",
									"//per trb",
									"//console.log(xmlTree);",
									"",
									"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
									"tests[\"publicationTime = \" + xmlTree.Orca2Model.payloadPublication.$.publicationTime] = true",
									"tests[\"first_trafficElement_fsnd = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd] = true",
									"pm.environment.set(\"FSND\", xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd);",
									"tests[\"first_trafficElement_strt = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.strt] = true",
									"pm.environment.set(\"STRT\", xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.strt);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex-interface/orca2/trafficstate/strt?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex-interface",
								"orca2",
								"trafficstate",
								"strt"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "This test is aimed to retrieve all the Trafficstates (velocity, flux and density) related to the network (strt)\nProvider traffic state enabled; Opitma_ADI enabled"
					},
					"response": []
				},
				{
					"name": "76  Push Trafficstates into the Network",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "400d6b6c-b0b8-4e5d-acc4-9d33107bfbb1",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<Orca2Model xmlns=\"http://sistemaits.com/orca2/1\">\n    <exchange>\n        <provider>{{PROVIDERNAME}}</provider>\n    </exchange>\n    <payloadPublication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"MeasuredPublication\">\n        <MetaInfo>\n            <LocationUsed xsi:type=\"LocationUsedTDE\" type=\"Street\"/>\n        </MetaInfo>\n        <measuredData>\n            <trafficElement xsi:type=\"StreetTraffic\" strt='{{STRT}}' fsnd='{{FSND}}' flow=\"2000\" accu=\"200\"/>\n        </measuredData>\n    </payloadPublication>\n</Orca2Model>"
						},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex-interface/orca2/trafficstate?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex-interface",
								"orca2",
								"trafficstate"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "This test is aimed to push specific Trafficstates (velocity, flux and density) into the network (strt)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Events and TRE",
			"description": "",
			"item": [
				{
					"name": "77  Insertion of an incident events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f35087fe-433f-4d42-a37e-cb2430fb4377",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"OK\");",
									"});",
									"",
									"tests[\"OK? = \" + responseBody] = true"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "MYTIMESTAMP",
								"value": "{{$timestamp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<d2LogicalModel xmlns=\"http://datex2.eu/schema/2/2_0\" xmlns:ns2=\"http://datex2.eu/schema/2/2_0/com/sistemaits/ext\">\r\n    <exchange>\r\n        <supplierIdentification>\r\n            <country>other</country>\r\n            <nationalIdentifier>OPTIMA</nationalIdentifier>\r\n        </supplierIdentification>\r\n    </exchange>\r\n    <payloadPublication xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"SituationPublication\" lang=\"other\">\r\n        <publicationTime>2018-02-05T17:45:00.590+02:00</publicationTime>\r\n        <publicationCreator>\r\n            <country>other</country>\r\n            <nationalIdentifier>OPTIMA</nationalIdentifier>\r\n        </publicationCreator>\r\n        \r\n        <situation id=\"OPTIMA_SITN_1458285148913\" version=\"1\">\r\n            <headerInformation>\r\n                <confidentiality>noRestriction</confidentiality>\r\n                <informationStatus>real</informationStatus>\r\n            </headerInformation>\r\n            <situationRecord xsi:type=\"Accident\" id=\"OPTIMA_EVNT_1458285148913\" version=\"2\">\r\n                <situationRecordCreationTime>2018-02-05T17:45:00.590Z</situationRecordCreationTime>\r\n                <situationRecordVersionTime>2018-02-05T18:00:00.590+02:00</situationRecordVersionTime>\r\n                <probabilityOfOccurrence>certain</probabilityOfOccurrence>\r\n                <severity>low</severity>\r\n                <source>\r\n                    <sourceCountry>other</sourceCountry>\r\n                    <sourceIdentification>OPTIMA</sourceIdentification>\r\n                </source>\r\n                <validity>\r\n                    <validityStatus>definedByValidityTimeSpec</validityStatus>\r\n                    <validityTimeSpecification>\r\n                        <overallStartTime>2018-02-05T17:45:00.590Z</overallStartTime>\r\n                    </validityTimeSpecification>\r\n                </validity>\r\n                <impact/>\r\n                <generalPublicComment>\r\n                    <comment>\r\n                        <values>\r\n                            <value lang=\"other\">TEST-accident 165 gg</value>\r\n                        </values>\r\n                    </comment>\r\n                </generalPublicComment>\r\n                <groupOfLocations xsi:type=\"NonOrderedLocationGroupByList\">\r\n                    <locationContainedInGroup xsi:type=\"Linear\">\r\n                        <linearWithinLinearElement>\r\n                            <directionRelativeOnLinearSection>opposite</directionRelativeOnLinearSection>\r\n                            <linearElement>\r\n                                <roadNumber>{{STRT}}</roadNumber>\r\n                            </linearElement>\r\n                        </linearWithinLinearElement>\r\n                    </locationContainedInGroup>\r\n                </groupOfLocations>\r\n            </situationRecord>\r\n        </situation>\r\n        \r\n    </payloadPublication>\r\n</d2LogicalModel>"
						},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex2import/optima/?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex2import",
								"optima",
								""
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "This test is aimed to check the insertion of an incident event in Optima by using the datex2import data interface."
					},
					"response": []
				},
				{
					"name": "77 B Get incident events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68748e82-a0a9-4ca1-8136-81e3018fa2a3",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var xmlTree = xml2Json(responseBody);",
									"",
									"//per trb",
									"//console.log(xmlTree);",
									"",
									"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
									"tests[\"SITUATIONID = \" + xmlTree.d2LogicalModel.payloadPublication.situation.situationRecord.$.id] = true",
									"//tests[\"first_trafficElement_fsnd = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd] = true",
									"//pm.environment.set(\"FSND\", xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd);",
									"//tests[\"first_trafficElement_strt = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.strt] = true",
									"pm.environment.set(\"SITUATIONID\", xmlTree.d2LogicalModel.payloadPublication.situation.situationRecord.$.id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex2import/optima/situationPublication?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex2import",
								"optima",
								"situationPublication"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "77 B Get incident events"
					},
					"response": []
				},
				{
					"name": "78 Delete Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f95acbb-c642-4cbd-ad52-f0b8664553f5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"null\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"success? = \" + jsonData.success] = true",
									"tests[\"errorMessages? = \" + jsonData.errorMessages] = true"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "{{SITUATIONID}}",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex2import/optima/event/delete?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex2import",
								"optima",
								"event",
								"delete"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "78 Delete Event"
					},
					"response": []
				},
				{
					"name": "79 list of the results of the forecast on the existing links in the system corresponding to “Strt”",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9412a79-98d8-43c9-a974-9eef1695bdef",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var xmlTree = xml2Json(responseBody);",
									"//xmlTree e' gia' un object json che si può parsare. questo non serve: var jsonData = JSON.parse(xmlTree)",
									"",
									"//per trb",
									"//console.log(xmlTree);",
									"",
									"//la trasformazione del type xml in json introduce il problema dei due punti risolto con la trasformazione del campo xml in stringa",
									"dollar = JSON.stringify(xmlTree.Orca2Model.payloadPublication.$)",
									"tests[\"ForecastPublication = \" + dollar] = true",
									"tests[\"timezone = \" + xmlTree.Orca2Model.payloadPublication.MetaInfo.timezone] = true",
									"tests[\"first_traffic_element_iflw = \" + xmlTree.Orca2Model.payloadPublication.forecastData.trafficElement[0].$.iflw] = true",
									"//tests[\"first_trafficElement_fsnd = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd] = true",
									"//pm.environment.set(\"FSND\", xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.fsnd);",
									"//tests[\"first_trafficElement_strt = \" + xmlTree.Orca2Model.payloadPublication.measuredData[0].trafficElement[0].$.strt] = true",
									"//pm.environment.set(\"SITUATIONID\", xmlTree.d2LogicalModel.payloadPublication.situation.situationRecord.$.id);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex-interface/orca2/rlin/strt?idno={{STRT}}&fromnode={{FSND}}&session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex-interface",
								"orca2",
								"rlin",
								"strt"
							],
							"query": [
								{
									"key": "idno",
									"value": "{{STRT}}",
									"equals": true
								},
								{
									"key": "fromnode",
									"value": "{{FSND}}",
									"equals": true
								},
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "This test is aimed to get the list of the results of the forecast on the existing links in the system corresponding to “Strt” locations"
					},
					"response": []
				}
			]
		},
		{
			"name": "PUT",
			"description": "",
			"item": [
				{
					"name": "81",
					"description": "",
					"item": [
						{
							"name": "81  ETA trip service (base)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8645b566-7ff4-406f-bf6e-7a3536cda0e4",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('stop_time_update');",
											"var auxx = myvar[1].split('\\n');",
											"",
											"//test84",
											"var test84 = stringa.split('_')",
											"var mytest84t = test84[6].split('\\n');",
											"var mytest84 = mytest84t[0].split(':');",
											"var myrouteid = mytest84[1].substring(mytest84[1].indexOf('\"')+1,mytest84[1].lastIndexOf('\"'));",
											"",
											"//stopsequence",
											"var mystopsequence = auxx[1].split(':');",
											"var mystopsequenceid = mystopsequence[1]",
											"",
											"//stopid",
											"var aux = auxx[6].split(':');",
											"var mystopidid = aux[1]",
											"//epurazione delle doppie virgolette",
											"dudu = mystopidid.indexOf('\"')",
											"dada = mystopidid.lastIndexOf('\"')",
											"mystopid = mystopidid.substring(dudu+1,dada);",
											"",
											"//arrival",
											"var myarrival = auxx[4].split(':');",
											"var myarrivalid = myarrival[1]",
											"",
											"//per trb",
											"//console.log(auxx);",
											"//console.log(mystopsequenceid, mystopid, myarrivalid);",
											"//console.log(myrouteid);",
											"",
											"tests[\"STOP_SEQUENCE = \" + mystopsequenceid] = true",
											"tests[\"STOPID = \" + mystopid] = true",
											"tests[\"ARRIVAL = \" + myarrivalid] = true",
											"tests[\"ROUTEID = \" + myrouteid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"STOPSEQUENCE\", mystopsequenceid);",
											"pm.environment.set(\"STOPID\", mystopid);",
											"pm.environment.set(\"ARRIVAL\", myarrivalid);",
											"pm.environment.set(\"ROUTEID\", myrouteid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "ea85661a-ef06-4e3e-9d4c-293e48e15a71",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								},
								{
									"id": "3b45d6c6-3ff5-45d3-894a-fa88af4757bb",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": ""
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": ""
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": ""
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": ""
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": ""
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": "228013",
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "82",
					"description": "",
					"item": [
						{
							"name": "82 Schedule Update Process (base)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "82 - 81  ETA trip service (after82)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7b2b717-0749-472e-8297-7d654532dee0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"//var stringa = (responseBody);",
											"//var myvar = stringa.split('stop_time_update');",
											"//come richiesto dal test_book prendo il first stop_time_update ",
											"//var auxx = myvar[1].split('\\n');",
											"",
											"//stopsequence",
											"//var mystopsequence = auxx[1].split(':');",
											"//var mystopsequenceid = mystopsequence[1]",
											"",
											"//stopid",
											"//var aux = auxx[6].split(':');",
											"//var mystopidid = aux[1]",
											"//epurazione delle doppie virgolette",
											"//dudu = mystopidid.indexOf('\"')",
											"//dada = mystopidid.lastIndexOf('\"')",
											"//mystopid = mystopidid.substring(dudu+1,dada);",
											"",
											"//arrival",
											"//var myarrival = auxx[4].split(':');",
											"//var myarrivalid = myarrival[1]",
											"",
											"//per trb",
											"//console.log(mystopsequenceid, mystopid, myarrivalid);",
											"",
											"//tests[\"STOP_SEQUENCE = \" + mystopsequenceid] = true",
											"//tests[\"STOPID = \" + mystopid] = true",
											"//tests[\"ARRIVAL = \" + myarrivalid] = true",
											"",
											"//set variables for succesives test",
											"//pm.environment.set(\"STOPSEQUENCE\", mystopsequenceid);",
											"//pm.environment.set(\"STOPID\", mystopid);",
											"//pm.environment.set(\"ARRIVAL\", myarrivalid);",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"test_vehicle\");",
											"});",
											"",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"stop_id\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "16ed668b-d63b-4604-a47c-31dd38673c37",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						},
						{
							"name": "82  C",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/vehicle/test_vehicle?session={{SESSIONID}}&timeStamp={{FDAT}}&format=text",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"vehicle",
										"test_vehicle"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										}
									]
								},
								"description": "82 C test_vehicle"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "83",
					"description": "",
					"item": [
						{
							"name": "83  ETA stop service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62d5c150-7d89-4403-8cd3-813d5f64228a",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/stop/{{TSTP}}?timeStamp={{FDAT}}&timeInterval=P1DT0M&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"stop",
										"{{TSTP}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA stop service.\nFind a transit stop that is active (i.e. there is at least one trip that pass at the stop) in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from get_valid_stops('fdat');\nWhere fdat must be replaced with its value, for example: ‘2016-05-20 00:00:00';\nTSTP va messo a mano!"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "84",
					"description": "",
					"item": [
						{
							"name": "84.X Suppress trip (specific of test)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67b4551e-374a-4b98-b3b6-23209d58f09b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Created 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "header {\r\n  gtfs_realtime_version: \"1.0\"\r\n  incrementality: FULL_DATASET\r\n  timestamp: 1460994066\r\n}\r\nentity {\r\n  id: \"1\"\r\n  trip_update {\r\n    trip {\r\n      schedule_relationship: CANCELED\r\n      route_id: '{{ROUTEID}}'\r\n      trip_id: '{{RUN}}'\r\n    }\r\n  }\r\n}\r\n"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event/trip?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event",
										"trip"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check that public transport events suppressing a trip are correctly managed by Optima-PuT module. Execute query 81.sql before.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\n\nWhere fdat must be replaced with its value, for example: 2016-05-20 00:00:00. \nShould be returned all the record of table “runs” that are actives in the specified day. Choose one of this run and get its ID (column idno of the table runs), in the following referred to as xRun.\n\nThe GET should be return all the trips arrival time at the trip stops in the specified day, in GTFS text format"
							},
							"response": []
						},
						{
							"name": "84 - 82 Schedule Update Process (after 84.X)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "84 - 81  ETA trip service (after 84)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "614af50d-11cb-4963-9fec-4a913cfbe4c0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "e3d11083-f1b2-458b-97a0-4e70df744b14",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								},
								{
									"id": "0602420c-4390-4ad2-a81a-2fe1b8fa3973",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": "228013",
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						},
						{
							"name": "84 C (Eventid)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f7d198-f331-49ff-a6a0-d9336ac10c33",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('\\n');",
											"var myeventidt = myvar[6].split(':');",
											"var myeventidtt = myeventidt[1]",
											"var myeventid = myeventidtt.substring(myeventidtt.indexOf('\"')+1,myeventidtt.lastIndexOf('\"'));",
											"",
											"//console.log(myeventid);",
											"",
											"tests[\"EVENTID = \" + myeventid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"EVENTID\", myeventid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "return the event (in GTFS format) created\n\nto catch EVENTID"
							},
							"response": []
						},
						{
							"name": "84 D Delete event that canceled the trip before",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6268053-07d9-45dc-86ae-5f5f0e1c709d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Deleted 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?session={{SESSIONID}}&eventId={{EVENTID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "eventId",
											"value": "{{EVENTID}}",
											"equals": true
										}
									]
								},
								"description": "84 D Delete event that canceled the trip before"
							},
							"response": []
						},
						{
							"name": "84 - 82 Schedule Update Process (after 84d)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "85",
					"description": "",
					"item": [
						{
							"name": "85  Suppress line (caracteristic)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ba8c362-54c3-47d3-8913-6c3003d6a761",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Created 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "header {\r\n  gtfs_realtime_version: \"1.0\"\r\n  incrementality: FULL_DATASET\r\n  timestamp: 1460994066\r\n}\r\nentity {\r\n  id: \"1\"\r\n  trip_update {\r\n    trip {\r\n      schedule_relationship: CANCELED\r\n      route_id: '{{ROUTEID}}'\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event/line?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event",
										"line"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check that public transport events suppressing a line are correctly managed by Optima-PuT module."
							},
							"response": []
						},
						{
							"name": "85 - 82 Schedule Update Process (after 85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "85 - 81  ETA trip service (after 85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "614af50d-11cb-4963-9fec-4a913cfbe4c0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "62f5c73b-113f-4301-883a-84d00af6b7ef",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						},
						{
							"name": "85 - 84 C (Eventid after 85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f7d198-f331-49ff-a6a0-d9336ac10c33",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('\\n');",
											"var myeventidt = myvar[6].split(':');",
											"var myeventidtt = myeventidt[1]",
											"var myeventid = myeventidtt.substring(myeventidtt.indexOf('\"')+1,myeventidtt.lastIndexOf('\"'));",
											"",
											"//console.log(myeventid);",
											"",
											"tests[\"EVENTID = \" + myeventid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"EVENTID\", myeventid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "return the event (in GTFS format) created\n\nto catch EVENTID"
							},
							"response": []
						},
						{
							"name": "85 - 84 D Delete event that canceled the trip before (after85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6268053-07d9-45dc-86ae-5f5f0e1c709d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Deleted 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?session={{SESSIONID}}&eventId={{EVENTID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "eventId",
											"value": "{{EVENTID}}",
											"equals": true
										}
									]
								},
								"description": "84 D Delete event that canceled the trip before"
							},
							"response": []
						},
						{
							"name": "85 - 82 Schedule Update Process (after 85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "85 - 81  ETA trip service (after 85)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "614af50d-11cb-4963-9fec-4a913cfbe4c0",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "89c39682-6598-4016-825c-82719e6b775e",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "86",
					"description": "",
					"item": [
						{
							"name": "86 - 81  ETA trip service (xstopid2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f706ee30-c8bc-4689-8805-fc8f4dfa9733",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('stop_time_update');",
											"var auxx = myvar[1].split('\\n');",
											"",
											"//per il test86 mi serve quello della seconda stop_time_update!",
											"var test86 = myvar[2].split('\\n');",
											"",
											"//stopsequence",
											"var mystopsequence = auxx[1].split(':');",
											"var mystopsequenceid = mystopsequence[1]",
											"",
											"//test84 x routeid",
											"var test84 = stringa.split('_')",
											"var mytest84t = test84[6].split('\\n');",
											"var mytest84 = mytest84t[0].split(':');",
											"var myrouteid = mytest84[1].substring(mytest84[1].indexOf('\"')+1,mytest84[1].lastIndexOf('\"'));",
											"",
											"//stopid2",
											"var aux2 = test86[6].split(':');",
											"var mystopidid2 = aux2[1]",
											"//epurazione delle doppie virgolette",
											"dudu2 = mystopidid2.indexOf('\"')",
											"dada2 = mystopidid2.lastIndexOf('\"')",
											"mystopid2 = mystopidid2.substring(dudu2+1,dada2);",
											"",
											"//arrival",
											"//var myarrival = auxx[4].split(':');",
											"//var myarrivalid = myarrival[1]",
											"",
											"//per trb",
											"//console.log(auxx);",
											"//console.log(mystopsequenceid, mystopid, myarrivalid);",
											"//console.log(myrouteid);",
											"//console.log(mystopid2);",
											"",
											"tests[\"STOP_SEQUENCE = \" + mystopsequenceid] = true",
											"tests[\"STOPID2 = \" + mystopid2] = true",
											"    //tests[\"ARRIVAL = \" + myarrivalid] = true",
											"tests[\"ROUTEID = \" + myrouteid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"STOPSEQUENCE\", mystopsequenceid);",
											"pm.environment.set(\"STOPID2\", mystopid2);",
											"    //pm.environment.set(\"ARRIVAL\", myarrivalid);",
											"pm.environment.set(\"ROUTEID\", myrouteid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "8361f4db-0907-4d4a-a2d7-18a4a57d244c",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": "228013",
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						},
						{
							"name": "86 - 82 Schedule Update Process (after 86)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13358706-dd1f-4ec1-9321-6156c5eb4f7b",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "86 Suppress stop of a trip and test disruption service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "245d0404-838c-460d-b6cd-61ab6ca65d05",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Created 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "header {\r\n  gtfs_realtime_version: \"1.0\"\r\n  incrementality: FULL_DATASET\r\n  timestamp: 1461073128\r\n}\r\nentity {\r\n  id: \"4\"\r\n  trip_update {\r\n    trip {\r\n      trip_id: '{{RUN}}'\r\n      schedule_relationship: SCHEDULED\r\n      route_id: '{{ROUTEID}}'\r\n    }\r\n    stop_time_update {\r\n      stop_sequence: {{STOPSEQUENCE}}\r\n      schedule_relationship: SKIPPED\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event/trip/stops?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event",
										"trip",
										"stops"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check i) that public transport events suppressing a stop of a trip are correctly managed by Optima-PuT module and also ii)  the correct functioning of the disruption service."
							},
							"response": []
						},
						{
							"name": "86 - 81  ETA trip service (examine after 86 post)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f706ee30-c8bc-4689-8805-fc8f4dfa9733",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('stop_time_update');",
											"var auxx = myvar[1].split('\\n');",
											"",
											"//per il test86 mi serve quello della seconda stop_time_update!",
											"var test86 = myvar[2].split('\\n');",
											"",
											"//stopsequence",
											"var mystopsequence = auxx[1].split(':');",
											"var mystopsequenceid = mystopsequence[1]",
											"",
											"//test84 x routeid",
											"var test84 = stringa.split('_')",
											"var mytest84t = test84[6].split('\\n');",
											"var mytest84 = mytest84t[0].split(':');",
											"var myrouteid = mytest84[1].substring(mytest84[1].indexOf('\"')+1,mytest84[1].lastIndexOf('\"'));",
											"",
											"//stopid2",
											"var aux2 = test86[6].split(':');",
											"var mystopidid2 = aux2[1]",
											"//epurazione delle doppie virgolette",
											"dudu2 = mystopidid2.indexOf('\"')",
											"dada2 = mystopidid2.lastIndexOf('\"')",
											"mystopid2 = mystopidid2.substring(dudu2+1,dada2);",
											"",
											"//arrival",
											"//var myarrival = auxx[4].split(':');",
											"//var myarrivalid = myarrival[1]",
											"",
											"//per trb",
											"//console.log(auxx);",
											"//console.log(mystopsequenceid, mystopid, myarrivalid);",
											"//console.log(myrouteid);",
											"//console.log(mystopid2);",
											"",
											"tests[\"STOP_SEQUENCE = \" + mystopsequenceid] = true",
											"tests[\"STOPID2 = \" + mystopid2] = true",
											"    //tests[\"ARRIVAL = \" + myarrivalid] = true",
											"tests[\"ROUTEID = \" + myrouteid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"STOPSEQUENCE\", mystopsequenceid);",
											"pm.environment.set(\"STOPID2\", mystopid2);",
											"    //pm.environment.set(\"ARRIVAL\", myarrivalid);",
											"pm.environment.set(\"ROUTEID\", myrouteid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "for 86\nShould be returned the same response of step 2 but without the “stop_time_update” element with “stop_sequence” = xStopSequence1"
							},
							"response": [
								{
									"id": "e878a7ea-01d8-4ab0-8df4-cd1bec0fbf97",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						},
						{
							"name": "86 - 84 C (Eventid after 86-81)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32f7d198-f331-49ff-a6a0-d9336ac10c33",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('\\n');",
											"var myeventidt = myvar[6].split(':');",
											"var myeventidtt = myeventidt[1]",
											"var myeventid = myeventidtt.substring(myeventidtt.indexOf('\"')+1,myeventidtt.lastIndexOf('\"'));",
											"",
											"//console.log(myeventid);",
											"",
											"tests[\"EVENTID = \" + myeventid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"EVENTID\", myeventid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "return the event (in GTFS format) created\n\nto catch EVENTID"
							},
							"response": []
						},
						{
							"name": "86 (caractristic) Disruption trip",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9341316-20c5-4bdb-8f2a-956c4bbc5651",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/disruption/trip/{{RUN}}?format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"disruption",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "Should be returned the event in GTFS format created at step 5, but now the value of field “id” of element “entity” is the ID assigned automatically by Optima to this event and should be the value of xEventId"
							},
							"response": []
						},
						{
							"name": "86 (withstopid2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99aec145-f511-4f67-8780-f818b3a0212f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/disruption/stop/{{STOPID2}}?format=text&timeStamp={{FDAT}}&timeInterval=P1DT0M&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"disruption",
										"stop",
										"{{STOPID2}}"
									],
									"query": [
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "86 C"
							},
							"response": []
						},
						{
							"name": "86 - 84 D Delete event (after 86)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6268053-07d9-45dc-86ae-5f5f0e1c709d",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Deleted 1 events\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/event?session={{SESSIONID}}&eventId={{EVENTID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"event"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "eventId",
											"value": "{{EVENTID}}",
											"equals": true
										}
									]
								},
								"description": "84 D Delete event that canceled the trip before"
							},
							"response": []
						},
						{
							"name": "86 - 82 Schedule Update Process (afetr86)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63c60a62-18ef-4a7f-821b-8a7a3ae2edc6",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Update schedule process with update instant set to:\");",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDAT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDAT}}",
											"equals": true
										}
									]
								},
								"description": "82 B\nUpdate schedule process with update instant set to: fdat"
							},
							"response": []
						},
						{
							"name": "86 - 81  ETA trip service (at the end)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f706ee30-c8bc-4689-8805-fc8f4dfa9733",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//la risposta del body è puro testo, anche se assomiglia a json.",
											"var stringa = (responseBody);",
											"",
											"//come richiesto dal test_book prendo il first stop_time_update test 82",
											"var myvar = stringa.split('stop_time_update');",
											"var auxx = myvar[1].split('\\n');",
											"",
											"//per il test86 mi serve quello della seconda stop_time_update!",
											"var test86 = myvar[2].split('\\n');",
											"",
											"//stopsequence",
											"var mystopsequence = auxx[1].split(':');",
											"var mystopsequenceid = mystopsequence[1]",
											"",
											"//test84 x routeid",
											"var test84 = stringa.split('_')",
											"var mytest84t = test84[6].split('\\n');",
											"var mytest84 = mytest84t[0].split(':');",
											"var myrouteid = mytest84[1].substring(mytest84[1].indexOf('\"')+1,mytest84[1].lastIndexOf('\"'));",
											"",
											"//stopid2",
											"var aux2 = test86[6].split(':');",
											"var mystopidid2 = aux2[1]",
											"//epurazione delle doppie virgolette",
											"dudu2 = mystopidid2.indexOf('\"')",
											"dada2 = mystopidid2.lastIndexOf('\"')",
											"mystopid2 = mystopidid2.substring(dudu2+1,dada2);",
											"",
											"//arrival",
											"//var myarrival = auxx[4].split(':');",
											"//var myarrivalid = myarrival[1]",
											"",
											"//per trb",
											"//console.log(auxx);",
											"//console.log(mystopsequenceid, mystopid, myarrivalid);",
											"//console.log(myrouteid);",
											"//console.log(mystopid2);",
											"",
											"tests[\"STOP_SEQUENCE = \" + mystopsequenceid] = true",
											"tests[\"STOPID2 = \" + mystopid2] = true",
											"    //tests[\"ARRIVAL = \" + myarrivalid] = true",
											"tests[\"ROUTEID = \" + myrouteid] = true",
											"",
											"//set variables for succesives test",
											"pm.environment.set(\"STOPSEQUENCE\", mystopsequenceid);",
											"pm.environment.set(\"STOPID2\", mystopid2);",
											"    //pm.environment.set(\"ARRIVAL\", myarrivalid);",
											"pm.environment.set(\"ROUTEID\", myrouteid);"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"trip",
										"{{RUN}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct working of ETA trip service.\nFind a trip that is active in fdat by running the following sql query with pgadmin on the Optima database:\nselect * from \n(\n\twith input as\n\t(select * from get_valid_runs_in_day('fdat in sql'))\n\tselect *,get_last_arrival_time_for_run(input.idno::text) arrival from input\n) t\nwhere t.arrival < 240000;\nwhere'fdat in sql'must be replaced with its value, for example: 2016-05-20 00:00:00"
							},
							"response": [
								{
									"id": "20386a65-12ee-42f7-9fe9-192a01b3c304",
									"name": "81  ETA trip service (base)",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {},
										"url": {
											"raw": "{{AS_ADDRESS}}/optima-put/eta/trip/{{RUN}}?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
											"host": [
												"{{AS_ADDRESS}}"
											],
											"path": [
												"optima-put",
												"eta",
												"trip",
												"{{RUN}}"
											],
											"query": [
												{
													"key": "timeStamp",
													"value": "{{FDAT}}",
													"equals": true
												},
												{
													"key": "format",
													"value": "text",
													"equals": true
												},
												{
													"key": "session",
													"value": "{{SESSIONID}}",
													"equals": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "plain",
									"_postman_previewtype": "text",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "4266",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "text/plain",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 14 Feb 2018 10:59:52 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "WildFly/10",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "X-Powered-By",
											"value": "Undertow/1",
											"name": "X-Powered-By",
											"description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
										}
									],
									"cookie": [
										{
											"expires": "Tue Jan 19 2038 04:14:07 GMT+0100 (W. Europe Standard Time)",
											"httpOnly": false,
											"domain": "optec3asnew.westeurope.cloudapp.azure.com",
											"path": "/optima-wsi/auth/login",
											"secure": false,
											"value": "optima",
											"key": "configuration"
										}
									],
									"responseTime": 228013,
									"body": "header {\n  gtfs_realtime_version: \"1.0\"\n  incrementality: FULL_DATASET\n  timestamp: 1518605992\n}\nentity {\n  id: \"1\"\n  trip_update {\n    trip {\n      trip_id: \"10:14:21720:313:1\"\n      route_id: \"10\"\n    }\n    stop_time_update {\n      stop_sequence: 1\n      arrival {\n        delay: 0\n        time: 1518573720\n      }\n      stop_id: \"405\"\n    }\n    stop_time_update {\n      stop_sequence: 2\n      arrival {\n        delay: 0\n        time: 1518573780\n      }\n      stop_id: \"1735\"\n    }\n    stop_time_update {\n      stop_sequence: 3\n      arrival {\n        delay: 0\n        time: 1518573810\n      }\n      stop_id: \"329\"\n    }\n    stop_time_update {\n      stop_sequence: 4\n      arrival {\n        delay: 0\n        time: 1518573990\n      }\n      stop_id: \"1713\"\n    }\n    stop_time_update {\n      stop_sequence: 5\n      arrival {\n        delay: 0\n        time: 1518574080\n      }\n      stop_id: \"664\"\n    }\n    stop_time_update {\n      stop_sequence: 6\n      arrival {\n        delay: 0\n        time: 1518574110\n      }\n      stop_id: \"660\"\n    }\n    stop_time_update {\n      stop_sequence: 7\n      arrival {\n        delay: 0\n        time: 1518574170\n      }\n      stop_id: \"156\"\n    }\n    stop_time_update {\n      stop_sequence: 8\n      arrival {\n        delay: 0\n        time: 1518574230\n      }\n      stop_id: \"1599\"\n    }\n    stop_time_update {\n      stop_sequence: 9\n      arrival {\n        delay: 0\n        time: 1518574920\n      }\n      stop_id: \"122\"\n    }\n    stop_time_update {\n      stop_sequence: 10\n      arrival {\n        delay: 0\n        time: 1518574980\n      }\n      stop_id: \"1149\"\n    }\n    stop_time_update {\n      stop_sequence: 11\n      arrival {\n        delay: 0\n        time: 1518575340\n      }\n      stop_id: \"1179\"\n    }\n    stop_time_update {\n      stop_sequence: 12\n      arrival {\n        delay: 0\n        time: 1518575370\n      }\n      stop_id: \"1181\"\n    }\n    stop_time_update {\n      stop_sequence: 13\n      arrival {\n        delay: 0\n        time: 1518575490\n      }\n      stop_id: \"1200\"\n    }\n    stop_time_update {\n      stop_sequence: 14\n      arrival {\n        delay: 0\n        time: 1518575580\n      }\n      stop_id: \"1198\"\n    }\n    stop_time_update {\n      stop_sequence: 15\n      arrival {\n        delay: 0\n        time: 1518575700\n      }\n      stop_id: \"1421\"\n    }\n    stop_time_update {\n      stop_sequence: 16\n      arrival {\n        delay: 0\n        time: 1518576030\n      }\n      stop_id: \"242\"\n    }\n    stop_time_update {\n      stop_sequence: 17\n      arrival {\n        delay: 0\n        time: 1518576060\n      }\n      stop_id: \"218\"\n    }\n    stop_time_update {\n      stop_sequence: 18\n      arrival {\n        delay: 0\n        time: 1518576240\n      }\n      stop_id: \"607\"\n    }\n    stop_time_update {\n      stop_sequence: 19\n      arrival {\n        delay: 0\n        time: 1518576300\n      }\n      stop_id: \"604\"\n    }\n    stop_time_update {\n      stop_sequence: 20\n      arrival {\n        delay: 0\n        time: 1518576330\n      }\n      stop_id: \"539\"\n    }\n    stop_time_update {\n      stop_sequence: 21\n      arrival {\n        delay: 0\n        time: 1518576420\n      }\n      stop_id: \"177\"\n    }\n    stop_time_update {\n      stop_sequence: 22\n      arrival {\n        delay: 0\n        time: 1518576450\n      }\n      stop_id: \"576\"\n    }\n    stop_time_update {\n      stop_sequence: 23\n      arrival {\n        delay: 0\n        time: 1518576540\n      }\n      stop_id: \"152\"\n    }\n    stop_time_update {\n      stop_sequence: 24\n      arrival {\n        delay: 0\n        time: 1518576720\n      }\n      stop_id: \"62\"\n    }\n    stop_time_update {\n      stop_sequence: 25\n      arrival {\n        delay: 0\n        time: 1518576810\n      }\n      stop_id: \"54\"\n    }\n    stop_time_update {\n      stop_sequence: 26\n      arrival {\n        delay: 0\n        time: 1518576900\n      }\n      stop_id: \"57\"\n    }\n    stop_time_update {\n      stop_sequence: 27\n      arrival {\n        delay: 0\n        time: 1518576930\n      }\n      stop_id: \"40\"\n    }\n    stop_time_update {\n      stop_sequence: 28\n      arrival {\n        delay: 0\n        time: 1518577080\n      }\n      stop_id: \"1294\"\n    }\n    stop_time_update {\n      stop_sequence: 29\n      arrival {\n        delay: 0\n        time: 1518577230\n      }\n      stop_id: \"1\"\n    }\n  }\n}\n"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "87",
					"description": "",
					"item": [
						{
							"name": "87  Predefined transfer service",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82d58e0f-a04a-490d-ae2f-34f3de88a73f",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/stop/{{TSTP}}?timeStamp={{FDAT}}&timeInterval=P1DT0M&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"stop",
										"{{TSTP}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "This test is aimed to check the correct functioning of predefined transfer service. StopID a mano dalla query sul database\n\nselect * from\n(\n\tselect distinct tstp,sum(t3.count) over (partition by tstp) lines_passing_through\n\tfrom\n\t(\n\t\tselect *,1 count from \n\t\t(\n\t\tselect distinct line,tstp from\n\t\t\t(\n\t\t\t\tselect line_route.line line,stop.tstp,stop.line_route,stop.istp\n\t\t\t\tfrom stop,line_route\n\t\t\t\twhere line_route.idno=stop.line_route\n\t\t\t\torder by tstp\n\t\t\t) t1\n\t\t\torder by tstp\n\t\t) t2\n\t) t3\n) t4\nwhere lines_passing_through > 1\nand tstp in \n(select idno from get_valid_stops('fdat'))\norder by lines_passing_through desc;\n\nL'output deve essere routeid1 e routeid2..."
							},
							"response": []
						},
						{
							"name": "87 B",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"transfers\" :\r\n  [\r\n    {\r\n      \"id\" : \"test_book\"\r\n      ,\"from_stop_id\": \"{{TSTP}}\"\r\n      ,\"from_route_id\": \"{{ROUTEID1}}\"\r\n      ,\"to_stop_id\": \"{{TSTP}}\"\r\n      ,\"to_route_id\": \"{{ROUTEID2}}\"\r\n      ,\"min_transfer_time\": 10\r\n      ,\"threshold\": 300\r\n    }\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/predefined?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"predefined"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "87 B"
							},
							"response": []
						},
						{
							"name": "87 C",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/predefined?timeStamp={{FDAT}}&format=text&transfer_id=test_book&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"predefined"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "transfer_id",
											"value": "test_book",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "87 C"
							},
							"response": []
						},
						{
							"name": "87 D",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/predefined?transfer_id=test_book&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"predefined"
									],
									"query": [
										{
											"key": "transfer_id",
											"value": "test_book",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "87 D"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "88",
					"description": "",
					"item": [
						{
							"name": "88 Trip-trip transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/stop/{{STOPID}}?timeStamp={{FDAT}}&timeInterval=P1DT0M&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"stop",
										"{{STOPID}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "88 Trip-trip transfer.\nThis test is aimed to check the correct functioning of the trip-trip transfer service"
							},
							"response": []
						},
						{
							"name": "88 B",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/trip/{{STOPID}}/{{TRIPID1}}/{{STOPID}}/{{TRIPID2}}?minTransferTime=10&alertThreshold=300&timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"trip",
										"{{STOPID}}",
										"{{TRIPID1}}",
										"{{STOPID}}",
										"{{TRIPID2}}"
									],
									"query": [
										{
											"key": "minTransferTime",
											"value": "10",
											"equals": true
										},
										{
											"key": "alertThreshold",
											"value": "300",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "88 B"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "89",
					"description": "",
					"item": [
						{
							"name": "89  Trip-route transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/stop/{{STOPID}}?timeStamp={{FDAT}}&timeInterval=P1DT0M&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"stop",
										"{{STOPID}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "89  Trip-route transfer\nThis test is aimed to check the correct functioning of trip-route transfer service"
							},
							"response": []
						},
						{
							"name": "89 B",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/triproute/{{STOPID}}/{{TRIPID1}}/{{STOPID}}/{{ROUTEID2}}?minTransferTime=10&alertThreshold=300&timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"triproute",
										"{{STOPID}}",
										"{{TRIPID1}}",
										"{{STOPID}}",
										"{{ROUTEID2}}"
									],
									"query": [
										{
											"key": "minTransferTime",
											"value": "10",
											"equals": true
										},
										{
											"key": "alertThreshold",
											"value": "300",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "89 B"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "90",
					"description": "",
					"item": [
						{
							"name": "90 Route-route transfer",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/eta/stop/{{STOPID}}?timeStamp={{FDAT}}&timeInterval=P1DT0M&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"eta",
										"stop",
										"{{STOPID}}"
									],
									"query": [
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "timeInterval",
											"value": "P1DT0M",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "90 Route-route transfer.\nThis test is aimed to check the correct functioning of route-route transfer service.\n\nShould be returned all the trips arrival time at the specified stop in the specified day."
							},
							"response": []
						},
						{
							"name": "90 B",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/transfer/route/{{STOPID}}/{{ROUTEID1}}/{{STOPID}}/{{ROUTEID2}}?minTransferTime=10&alertThreshold=300&timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"transfer",
										"route",
										"{{STOPID}}",
										"{{ROUTEID1}}",
										"{{STOPID}}",
										"{{ROUTEID2}}"
									],
									"query": [
										{
											"key": "minTransferTime",
											"value": "10",
											"equals": true
										},
										{
											"key": "alertThreshold",
											"value": "300",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDAT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "90 B\nShould be returned the transfer information according to the sistema GTFS format extension."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "91",
					"description": "",
					"item": [
						{
							"name": "91 Position service",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/trip?tripId={{RUN}}&timeStamp={{FDATINSTANT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"trip"
									],
									"query": [
										{
											"key": "tripId",
											"value": "{{RUN}}",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDATINSTANT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 Position service\nThis test is aimed to check the correct functioning of Position service. It consider both: trip, line vehicles and raw vehicles; where the latter represent the vehicle real time position information obtained from external data sources without any elaboration."
							},
							"response": []
						},
						{
							"name": "91 B",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/line?lineId={{LINEID}}&timeStamp={{FDATINSTANT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"line"
									],
									"query": [
										{
											"key": "lineId",
											"value": "{{LINEID}}",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDATINSTANT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 B\nShould be returned the expected position, of the vehicles serving all the active trips, at the specified time instant, of the line xLine."
							},
							"response": []
						},
						{
							"name": "91 C",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "header {\r\n  gtfs_realtime_version: \"1.0\"\r\n  timestamp: {{FDATINSTANTEPOCH}}\r\n}\r\nentity {\r\n  id: \"1\"\r\n  vehicle {\r\n    trip {\r\n      trip_id: \"{{RUN}}\"\r\n    }\r\n    vehicle {\r\n      id: \"test_vehicle\"\r\n    }\r\n    position {\r\n      latitude: {{Ycoo}}\r\n      longitude: {{Xcoo}}\r\n    }\r\n    current_stop_sequence: {{CURRENT_STOP_SEQUENCE}}\r\n    current_status: {{CURRENT_STATUS}}\r\n    timestamp: {{FDATINSTANTEPOCH}}\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/vehicle?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"vehicle"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 C"
							},
							"response": []
						},
						{
							"name": "91 D",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/run?session={{SESSIONID}}&instant={{FDATINSTANT}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"run"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										},
										{
											"key": "instant",
											"value": "{{FDATINSTANT}}",
											"equals": true
										}
									]
								},
								"description": "91 D\nRun the following GET request with postman to run the schedule update process with fdatinstant"
							},
							"response": []
						},
						{
							"name": "91 E",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/vehicle?vehicleId=test_vehicle&timeStamp={{FDATINSTANT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"vehicle"
									],
									"query": [
										{
											"key": "vehicleId",
											"value": "test_vehicle",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDATINSTANT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 E"
							},
							"response": []
						},
						{
							"name": "91 F",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/schedule/update/reset/timetable/realtime?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"schedule",
										"update",
										"reset",
										"timetable",
										"realtime"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 F"
							},
							"response": []
						},
						{
							"name": "91 G",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "header {\r\n  gtfs_realtime_version: \"1.0\"\r\n  timestamp: {{FDATINSTANTEPOCH}}\r\n}\r\nentity {\r\n  id: \"1\"\r\n  vehicle {\r\n    vehicle {\r\n      id: \"test_vehicle\"\r\n    }\r\n    position {\r\n      latitude: {{Ycoo}}\r\n      longitude: {{Xcoo}}\r\n    }\r\n    current_stop_sequence: {{CURRENT_STOP_SEQUENCE}}\r\n    current_status: {{CURRENT_STATUS}}\r\n    timestamp: {{FDATINSTANTEPOCH}}\r\n  }\r\n}\r\n"
								},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/vehicle?session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"vehicle"
									],
									"query": [
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 G"
							},
							"response": []
						},
						{
							"name": "91 H",
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{AS_ADDRESS}}/optima-put/position/raw?vehicleId=test_vehicle&timeStamp={{FDATINSTANT}}&format=text&session={{SESSIONID}}",
									"host": [
										"{{AS_ADDRESS}}"
									],
									"path": [
										"optima-put",
										"position",
										"raw"
									],
									"query": [
										{
											"key": "vehicleId",
											"value": "test_vehicle",
											"equals": true
										},
										{
											"key": "timeStamp",
											"value": "{{FDATINSTANT}}",
											"equals": true
										},
										{
											"key": "format",
											"value": "text",
											"equals": true
										},
										{
											"key": "session",
											"value": "{{SESSIONID}}",
											"equals": true
										}
									]
								},
								"description": "91 H\t"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "92 Lines through stop service",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/optima-put/topology/line/stop/{{STOPID}}?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"optima-put",
								"topology",
								"line",
								"stop",
								"{{STOPID}}"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "92 Lines through stop service"
					},
					"response": []
				},
				{
					"name": "107 ETA service",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/optima-put/eta/trip?timeStamp={{FDAT}}&format=text&session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"optima-put",
								"eta",
								"trip"
							],
							"query": [
								{
									"key": "timeStamp",
									"value": "{{FDAT}}",
									"equals": true
								},
								{
									"key": "format",
									"value": "text",
									"equals": true
								},
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "107 ETA service"
					},
					"response": []
				}
			]
		},
		{
			"name": "GEOSERVER LAYERS",
			"description": "",
			"item": [
				{
					"name": "106 WMS REQUEST",
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/geoserver/wms/?LAYERS=optima%3Astrt&FORMAT=image%2Fpng&TRANSPARENT=TRUE&TILED=true&STYLES=strt&VISIBILITY=false&SERVICE=WMS&VERSION=1.1.1&REQUEST=GetMap&SRS=EPSG%3A900913&BBOX={{BBOX}}&WIDTH=256&HEIGHT=256&session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"geoserver",
								"wms",
								""
							],
							"query": [
								{
									"key": "LAYERS",
									"value": "optima%3Astrt",
									"equals": true
								},
								{
									"key": "FORMAT",
									"value": "image%2Fpng",
									"equals": true
								},
								{
									"key": "TRANSPARENT",
									"value": "TRUE",
									"equals": true
								},
								{
									"key": "TILED",
									"value": "true",
									"equals": true
								},
								{
									"key": "STYLES",
									"value": "strt",
									"equals": true
								},
								{
									"key": "VISIBILITY",
									"value": "false",
									"equals": true
								},
								{
									"key": "SERVICE",
									"value": "WMS",
									"equals": true
								},
								{
									"key": "VERSION",
									"value": "1.1.1",
									"equals": true
								},
								{
									"key": "REQUEST",
									"value": "GetMap",
									"equals": true
								},
								{
									"key": "SRS",
									"value": "EPSG%3A900913",
									"equals": true
								},
								{
									"key": "BBOX",
									"value": "{{BBOX}}",
									"equals": true
								},
								{
									"key": "WIDTH",
									"value": "256",
									"equals": true
								},
								{
									"key": "HEIGHT",
									"value": "256",
									"equals": true
								},
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "106 WMS REQUEST"
					},
					"response": []
				}
			]
		},
		{
			"name": "PREDEFINED PATH",
			"description": "",
			"item": [
				{
					"name": "CREATE PREDEFINED PATH",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"code\": \"test1\",    \r\n    \"path\": \r\n        {\r\n            \"streets\": [\r\n\t\t\t\t{\r\n\t\t\t\t    \"id\": 771589,\r\n                    \"tail\": 8828970,\r\n                    \"startProgressive\": 0\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t    \"id\": 771589,\r\n                    \"tail\": 8829123,\r\n                    \"endProgressive\": 1\r\n\t\t\t\t}\r\n\t\t\t\t] \r\n        }\r\n}"
						},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex-interface/predefinedpath?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex-interface",
								"predefinedpath"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "Creation of a Predefined Path"
					},
					"response": []
				},
				{
					"name": "DELETE PREDEFINED PATH",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{AS_ADDRESS}}/datex-interface/predefinedpath/{{PREDEFINEDPATHID}}?session={{SESSIONID}}",
							"host": [
								"{{AS_ADDRESS}}"
							],
							"path": [
								"datex-interface",
								"predefinedpath",
								"{{PREDEFINEDPATHID}}"
							],
							"query": [
								{
									"key": "session",
									"value": "{{SESSIONID}}",
									"equals": true
								}
							]
						},
						"description": "deletion of a predefined path"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					""
				],
				"id": "0b7a7d65-f6d8-425a-8703-b0ceb0c07213",
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					""
				],
				"id": "3328f439-5452-4cad-a9ed-410410a43f59",
				"type": "text/javascript"
			}
		}
	]
}